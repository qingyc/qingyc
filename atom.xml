<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青同学</title>
  
  <subtitle>啦啦啦啦啦</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qingyc.github.io/"/>
  <updated>2019-07-28T05:57:03.113Z</updated>
  <id>http://qingyc.github.io/</id>
  
  <author>
    <name>青同学</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PorterDuffXfermode的一些使用问题</title>
    <link href="http://qingyc.github.io/2019/07/28/PorterDuffXfermode%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://qingyc.github.io/2019/07/28/PorterDuffXfermode的一些使用问题/</id>
    <published>2019-07-28T05:39:56.000Z</published>
    <updated>2019-07-28T05:57:03.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PorterDuffXfermode的一些使用问题"><a href="#PorterDuffXfermode的一些使用问题" class="headerlink" title="PorterDuffXfermode的一些使用问题"></a>PorterDuffXfermode的一些使用问题</h1><h2 id="一-PorterDuff-Mode使用问题"><a href="#一-PorterDuff-Mode使用问题" class="headerlink" title="一 PorterDuff.Mode使用问题"></a>一 PorterDuff.Mode使用问题</h2><h4 id="1-1-PorterDuff-Mode-CLEAR"><a href="#1-1-PorterDuff-Mode-CLEAR" class="headerlink" title="1.1  PorterDuff.Mode.CLEAR"></a>1.1  <strong><em>PorterDuff.Mode.CLEAR</em></strong></h4><ul><li><p>正常效果</p><p>  <img src="android_26_PorterDuff_Mode_CLEAR.jpg" alt="android_26_PorterDuff_Mode_CLEAR"></p></li></ul><ul><li><p>targetSdkVersion 28</p><p>  <img src="android_28_PorterDuff_Mode_CLEAR.jpg" alt="android_28_PorterDuff_Mode_CLEAR"></p></li></ul><h4 id="1-2-PorterDuff-Mode"><a href="#1-2-PorterDuff-Mode" class="headerlink" title="1.2 PorterDuff.Mode"></a>1.2 PorterDuff.Mode</h4><p>PorterDuff.Mode 官方效果<br><a href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html</a></p><p>1.2 PorterDuffXfermode 在Android 27 和 28 的实际效果</p><ul><li><p>PorterDuffXfermode_27</p><p>  <img src="PorterDuffXfermode_27.png" alt="PorterDuffXfermode_27"></p></li><li><p>PorterDuffXfermode_28</p><p>  <img src="PorterDuffXfermode_28.png" alt="PorterDuffXfermode_28"></p></li></ul><p><a href="https://stackoverflow.com/questions/51538443/xfermode-in-android-p-beta?noredirect=1#comment90044905_51538443" target="_blank" rel="noopener">图片来源</a>    </p><h3 id="二-绘制2时-canvas-画布不同导致的问题"><a href="#二-绘制2时-canvas-画布不同导致的问题" class="headerlink" title="二 绘制2时 canvas 画布不同导致的问题"></a>二 绘制2时 canvas 画布不同导致的问题</h3><p>after change another canvas ,PorterDuffXfermode(PorterDuff.Mode.CLEAR) is not work</p><p>创建 另一个 画布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//保存没有背景的截图</span><br><span class="line">screenShotBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)</span><br><span class="line">mScreenShotCanvas = Canvas(screenShotBitmap)</span><br></pre></td></tr></table></figure><h3 id="dispatchDraw"><a href="#dispatchDraw" class="headerlink" title="dispatchDraw"></a>dispatchDraw</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    override fun dispatchDraw(canvas: Canvas?) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        //7.绘制蒙版</span><br><span class="line">        drawMask(canvas)</span><br><span class="line">       ....</span><br><span class="line"></span><br><span class="line">        //截图</span><br><span class="line">        mScreenShotCanvas?.let &#123; canvas -&gt;</span><br><span class="line">           ...</span><br><span class="line">            //7.绘制蒙版</span><br><span class="line">            drawMask(canvas, true)</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>问题 传入的canvas 不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 绘制蒙版</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">private fun drawMask(canvas: Canvas, shotScreen: Boolean = false) &#123;</span><br><span class="line">    try &#123;//qtip rl_frame_content -&gt; 相框外层容器</span><br><span class="line"></span><br><span class="line">        rl_frame_content?.let &#123;</span><br><span class="line">            //先获取相框外层容器的位置</span><br><span class="line">            val rlLeft = it.left</span><br><span class="line">            val rlTop = it.top</span><br><span class="line">            mGpuIV?.let &#123; gpuIv -&gt;</span><br><span class="line"></span><br><span class="line">                mMaskBitmap?.let &#123; mask -&gt;</span><br><span class="line"></span><br><span class="line">                    //获取相片和相框外侧之间的位置关系</span><br><span class="line"></span><br><span class="line">                    val gpuIvLeft = rl_gpu_iv_content_trim.left</span><br><span class="line">                    val gpuIvTop = rl_gpu_iv_content_trim.top</span><br><span class="line"></span><br><span class="line">                    val gpuIvWidth = rl_gpu_iv_content_trim.width</span><br><span class="line">                    val gpuIvHeight = rl_gpu_iv_content_trim.height</span><br><span class="line"></span><br><span class="line">                    val newWidth = gpuIvWidth - 2 * mMaskMargin</span><br><span class="line">                    val newHeight = gpuIvHeight - 2 * mMaskMargin</span><br><span class="line"></span><br><span class="line">                    //缩放后的蒙版(根据图片的大小调整蒙版大小)</span><br><span class="line">                    if (mScaledMaskBitmap == null) &#123;</span><br><span class="line">                        mScaledMaskBitmap = BitmapUtils.scaleBitmapInMaxWidthOrHeight(mask, newWidth, newHeight)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                      mScaledMaskBitmap?.let &#123; scaleMask -&gt;</span><br><span class="line">                            //绘制mask</span><br><span class="line">                            val left = rlLeft.toFloat() + gpuIvLeft</span><br><span class="line">                            val top = rlTop.toFloat() + gpuIvTop</span><br><span class="line"></span><br><span class="line">                            //1.离屏画布</span><br><span class="line">                            val save = canvas.saveLayer(left, top, left + gpuIvWidth, top + gpuIvHeight, null, Canvas.ALL_SAVE_FLAG)</span><br><span class="line">                            //2.绘制带颜色蒙版 创建大小和 rl_frame_content 一样的蒙版</span><br><span class="line">                            val dstBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)</span><br><span class="line">                            //创建蒙版画布</span><br><span class="line">                            val dstCav = Canvas(dstBitmap)</span><br><span class="line">                            //蒙版颜色</span><br><span class="line">                            dstCav.drawColor(mMaskColor)</span><br><span class="line">                            canvas.drawBitmap(dstBitmap, left, top, null)</span><br><span class="line"></span><br><span class="line">                            //3.蒙版掏空出透明形状区域</span><br><span class="line">                            val paintMask = Paint()</span><br><span class="line">                            paintMask.isAntiAlias = true</span><br><span class="line">                            paintMask.xfermode = PorterDuffXfermode(PorterDuff.Mode.CLEAR)</span><br><span class="line">                            //蒙版位置居中</span><br><span class="line">                            canvas.drawBitmap(scaleMask, left + (gpuIvWidth - scaleMask.width) / 2, top + (gpuIvHeight - scaleMask.height) / 2, paintMask)</span><br><span class="line"></span><br><span class="line">                            //4.画布恢复</span><br><span class="line">                            canvas.restoreToCount(save)</span><br><span class="line">                        &#125;                     &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (e: Exception) &#123;</span><br><span class="line">        QLogger.e(e)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="需要的效果"><a href="#需要的效果" class="headerlink" title="需要的效果"></a>需要的效果</h3><p><img src="inside_08.png" alt="蒙版"></p><p><img src="%E8%92%99%E7%89%88%E5%BD%A2%E7%8A%B6%E5%A4%B1%E8%B4%A5_01.png" alt="蒙版形状失败_01.png"></p><h3 id="截图时实际效果"><a href="#截图时实际效果" class="headerlink" title="截图时实际效果"></a>截图时实际效果</h3><p><img src="%E8%92%99%E7%89%88%E5%BD%A2%E7%8A%B6%E5%A4%B1%E8%B4%A5_02.png" alt="蒙版形状失败_02.png"></p><p>并不是 <code>paintMask.xfermode = PorterDuffXfermode(PorterDuff.Mode.CLEAR)</code><br>无效 而是 clear的区域不是 图片的非透明区而是 整个图片</p><ul><li>解决问题</li></ul><p>// QTIP: 2019-07-23 修改 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PorterDuff.Mode.CLEAR</span><br></pre></td></tr></table></figure><p>为 <strong><em>PorterDuff.Mode.DST_OUT</em></strong> 或者 <strong><em>PorterDuff.Mode.XOR</em></strong></p><p>待解决疑问 : Android api 28 以下  传入有bitmap的canvas 绘制时 PorterDuff.Mode.CLEAR  无效</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><strong><em><a href="https://stackoverflow.com/questions/51538443/xfermode-in-android-p-beta?noredirect=1#comment90044905_51538443" target="_blank" rel="noopener">https://stackoverflow.com/questions/51538443/xfermode-in-android-p-beta?noredirect=1#comment90044905_51538443</a></em></strong></p><p><a href="https://stackoverflow.com/questions/10494442/android-paint-porterduff-mode-clear?rq=1" target="_blank" rel="noopener">https://stackoverflow.com/questions/10494442/android-paint-porterduff-mode-clear?rq=1</a></p><p><a href="https://issuetracker.google.com/issues/111819103" target="_blank" rel="noopener">https://issuetracker.google.com/issues/111819103</a></p><p><a href="https://stackoverflow.com/questions/56189189/android-in-android-pie-api-28-radialgradient-draws-a-rectangle-instead-of-a?rq=1" target="_blank" rel="noopener">https://stackoverflow.com/questions/56189189/android-in-android-pie-api-28-radialgradient-draws-a-rectangle-instead-of-a?rq=1</a></p><p><a href="https://android.googlesource.com/platform/development/+/master/samples/ApiDemos/src/com/example/android/apis/graphics/Xfermodes.java" target="_blank" rel="noopener">https://android.googlesource.com/platform/development/+/master/samples/ApiDemos/src/com/example/android/apis/graphics/Xfermodes.java</a></p><p>关联下 <a href="https://github.com/googlesamples/android-ClippingBasic" target="_blank" rel="noopener">ViewOutlineProvider</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Interface by which a View builds its &#123;@link Outline&#125;, used for shadow casting and clipping.</span><br><span class="line"> */</span><br><span class="line">public abstract class ViewOutlineProvider &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PorterDuffXfermode的一些使用问题&quot;&gt;&lt;a href=&quot;#PorterDuffXfermode的一些使用问题&quot; class=&quot;headerlink&quot; title=&quot;PorterDuffXfermode的一些使用问题&quot;&gt;&lt;/a&gt;PorterDuffX
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开始整理下吧 ...</title>
    <link href="http://qingyc.github.io/2019/07/21/HelloWorld/"/>
    <id>http://qingyc.github.io/2019/07/21/HelloWorld/</id>
    <published>2019-07-20T17:01:10.000Z</published>
    <updated>2019-07-20T17:10:22.816Z</updated>
    
    <content type="html"><![CDATA[<p><img src="wuming.jpg" alt="wuming"></p><p>开始整理下吧 啦啦啦…..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;wuming.jpg&quot; alt=&quot;wuming&quot;&gt;&lt;/p&gt;
&lt;p&gt;开始整理下吧 啦啦啦…..&lt;/p&gt;

      
    
    </summary>
    
      <category term="qing" scheme="http://qingyc.github.io/categories/qing/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo-github-pages</title>
    <link href="http://qingyc.github.io/2019/07/20/hexo-github-pages/"/>
    <id>http://qingyc.github.io/2019/07/20/hexo-github-pages/</id>
    <published>2019-07-20T09:17:53.000Z</published>
    <updated>2019-07-20T16:57:35.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-github-pages-搭建个人博客"><a href="#Hexo-github-pages-搭建个人博客" class="headerlink" title="Hexo + github pages 搭建个人博客"></a>Hexo + github pages 搭建个人博客</h1><h2 id="一-Hexo"><a href="#一-Hexo" class="headerlink" title="一 Hexo"></a>一 Hexo</h2><p>啥是 Hexo</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>官方文档</p><p><a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/setup</a></p><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><h4 id="前提-先安装"><a href="#前提-先安装" class="headerlink" title="前提  先安装"></a>前提  先安装</h4><p>Node.js (Should be at least nodejs 6.9)</p><p>Git</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h3><ul><li><p>初始化</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>生成静态文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>运行</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>部署</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>  <a href="https://hexo.io/zh-cn/docs/deployment" target="_blank" rel="noopener">详细部署说明</a></p></li></ul><h2 id="2-Github-Pages"><a href="#2-Github-Pages" class="headerlink" title="2 Github Pages"></a>2 Github Pages</h2><p><a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a></p><p><a href="https://help.github.com/en/articles/quick-start-setting-up-a-custom-domain" target="_blank" rel="noopener">自定义域名</a></p><p>先安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="2-1-问题记录"><a href="#2-1-问题记录" class="headerlink" title="2.1 问题记录"></a>2.1 问题记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">and the repository exists.</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (/Users/xxx/GIT_HEXO_W/xxx.github.io/node_modules/hexo-util/lib/spawn.js:52:19)</span><br></pre></td></tr></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p><a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">生成ssh key </a></p><p><a href="https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account" target="_blank" rel="noopener">添加ssh key </a></p><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><p><a href="https://github.com/limedroid/HexoLearning" target="_blank" rel="noopener">Hexo 博客搭建指南</a></p><p><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo-github-pages-搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-github-pages-搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo + github pages 搭建个人博客&quot;&gt;&lt;/a&gt;Hexo + githu
      
    
    </summary>
    
      <category term="Hexo" scheme="http://qingyc.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://qingyc.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
