{"meta":{"title":"青同学","subtitle":"啦啦啦啦啦","description":"no description","author":"青同学","url":"http://qingyc.github.io","root":"/"},"pages":[{"title":"About","date":"2019-07-20T09:35:39.000Z","updated":"2019-07-20T17:00:31.252Z","comments":true,"path":"about/index.html","permalink":"http://qingyc.github.io/about/index.html","excerpt":"","text":"Github 简书"},{"title":"Categories","date":"2019-07-20T09:33:42.000Z","updated":"2019-07-20T16:59:43.842Z","comments":true,"path":"categories/index.html","permalink":"http://qingyc.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-07-20T09:35:22.000Z","updated":"2019-07-20T16:59:43.837Z","comments":true,"path":"tags/index.html","permalink":"http://qingyc.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"adb","slug":"adb","date":"2019-08-18T08:25:35.000Z","updated":"2019-08-18T08:34:06.624Z","comments":true,"path":"2019/08/18/adb/","link":"","permalink":"http://qingyc.github.io/2019/08/18/adb/","excerpt":"","text":"Adb常用命令小结基础1234adb version 显示 adb 版本 adb help 帮助 adb start-server 启动 adbadb kill-server 停止 adb 服务器 一.设备控制12345678910-d 指定当前唯一通过 USB 连接的 Android 设备为命令目标-e 指定当前唯一运行的模拟器为命令目标-s &lt;serialNumber&gt; 指定相应 serialNumber 号的设备/模拟器为命令目标adb devices 显示设备adb reboot 重启adb -s 选择设备例:adb -s emulator-5556 reboot 重启 emulator-5556 二.安装卸载12adb install path_to_apkadb uninstall packageName 三.文件复制到设备12adb pull remote localadb push local remote 在上述命令中，local 和 remote 指的是开发计算机（本地）和模拟器/设备实例（远程）上目标文件/目录的路径。例如： 1adb push foo.txt /sdcard/foo.txt 四.Shell 在目标模拟器/设备实例中启动远程 shell不进入模拟器/设备实例上的 adb 远程 shell 发出设备命令: 1adb [-d|-e|-s serial_number] shell shell_command 进入模拟器/设备实例上的远程 shell： 1adb [-d|-e|-s serial_number] shell 当您准备退出远程 shell 时，按 Control + D 或输入 exit。 shell 命令二进制文件存储在模拟器或设备的文件系统中，其路径为 /system/bin/ 4.1 获取设备信息1adb shell getprop 4.2 Window manager1adb shell wm 帮助 1234567891011121314Window manager (window) commands: help Print this help text. size [reset|WxH|WdpxHdp] Return or override display size. width and height in pixels unless suffixed with &apos;dp&apos;. density [reset|DENSITY] Return or override display density. overscan [reset|LEFT,TOP,RIGHT,BOTTOM] Set overscan area for display. scaling [off|auto] Set display scaling mode. dismiss-keyguard 例 12345获取屏幕尺寸命令:adb shell wm size返回结果:Physical size: 1080x2160 4.3 am Activity Manager在 adb shell 中，您可以使用 Activity Manager (am) 工具发出命令以执行各种系统操作，如启动 Activity、强行停止进程、广播 intent、修改设备屏幕属性及其他操作 4.3.1 常用命令:123456789启动 adb shell am start -n 包名/activity名(全路径)关闭adb shell am force-stop 包名例:打开浏览器先 adb shell 再:打开浏览器am start -a android.intent.action.VIEW -d http://www.google.cn/ 4.3.2 start 启动 intent 指定的 Activity12345678910111213start [options] intent 启动 intent 指定的 Activity。请参阅 intent 参数的规范。选项包括：-D：启用调试。-W：等待启动完成。--start-profiler file：启动分析器并将结果发送到 file。-P file：类似于 --start-profiler，但当应用进入空闲状态时分析停止。-R count：重复 Activity 启动 count 次数。在每次重复前，将完成顶部 Activity。-S：启动 Activity 前强行停止目标应用。--opengl-trace：启用 OpenGL 函数的跟踪。--user user_id | current：指定要作为哪个用户运行；如果未指定，则作为当前用户运行。 4.3.3 startService 启动 intent 指定的 Service1startservice [options] intent 4.3.4 other12345678broadcast [options] intent 发出广播 intentforce-stop package 强行停止与 package（应用的包名称）关联的所有应用kill [options] package 终止与 package（应用的包名称）关联的所有进程。此命令仅终止可安全终止且不会影响用户体验的进程kill-all 终止所有后台进程clear-debug-app 使用 set-debug-app 清除以前针对调试用途设置的软件包...... 4.3.5 intent 参数的规范123456789101112131415对于采用 intent 参数的 Activity Manager 命令，您可以使用以下选项指定 intent：-a action指定 intent 操作，如“android.intent.action.VIEW”。此指定只能声明一次。-d data_uri指定 intent 数据 URI，如“content://contacts/people/1”。此指定只能声明一次。-t mime_type指定 intent MIME 类型，如“image/png”。此指定只能声明一次。-c category指定 intent 类别，如“android.intent.category.APP_CONTACTS”。-n component指定带有软件包名称前缀的组件名称以创建显式 intent，如“com.example.app/.ExampleActivity”。-f flags将标志添加到 setFlags() 支持的 intent。 4.4 pm 调用软件包管理器查看帮助 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133shell@JDtab:/ $ pmusage: pm list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER] pm list permission-groups pm list permissions [-g] [-f] [-d] [-u] [GROUP] pm list instrumentation [-f] [TARGET-PACKAGE] pm list features pm list libraries pm list users pm path PACKAGE pm dump PACKAGE pm install [-lrtsfd] [-i PACKAGE] [--user USER_ID] [PATH] pm install-create [-lrtsfdp] [-i PACKAGE] [-S BYTES] [--install-location 0/1/2] [--force-uuid internal|UUID] pm install-write [-S BYTES] SESSION_ID SPLIT_NAME [PATH] pm install-commit SESSION_ID pm install-abandon SESSION_ID pm uninstall [-k] [--user USER_ID] PACKAGE pm set-installer PACKAGE INSTALLER pm move-package PACKAGE [internal|UUID] pm move-primary-storage [internal|UUID] pm clear [--user USER_ID] PACKAGE pm enable [--user USER_ID] PACKAGE_OR_COMPONENT pm disable [--user USER_ID] PACKAGE_OR_COMPONENT pm disable-user [--user USER_ID] PACKAGE_OR_COMPONENT pm disable-until-used [--user USER_ID] PACKAGE_OR_COMPONENT pm hide [--user USER_ID] PACKAGE_OR_COMPONENT pm unhide [--user USER_ID] PACKAGE_OR_COMPONENT pm grant [--user USER_ID] PACKAGE PERMISSION pm revoke [--user USER_ID] PACKAGE PERMISSION pm reset-permissions pm set-app-link [--user USER_ID] PACKAGE &#123;always|ask|never|undefined&#125; pm get-app-link [--user USER_ID] PACKAGE pm set-install-location [0/auto] [1/internal] [2/external] pm get-install-location pm set-permission-enforced PERMISSION [true|false] pm trim-caches DESIRED_FREE_SPACE [internal|UUID] pm create-user [--profileOf USER_ID] [--managed] USER_NAME pm remove-user USER_ID pm get-max-userspm list packages: prints all packages, optionally only those whose package name contains the text in FILTER. Options: -f: see their associated file. -d: filter to only show disbled packages. -e: filter to only show enabled packages. -s: filter to only show system packages. -3: filter to only show third party packages. -i: see the installer for the packages. -u: also include uninstalled packages.pm list permission-groups: prints all known permission groups.pm list permissions: prints all known permissions, optionally only those in GROUP. Options: -g: organize by group. -f: print all information. -s: short summary. -d: only list dangerous permissions. -u: list only the permissions users will see.pm list instrumentation: use to list all test packages; optionally supply &lt;TARGET-PACKAGE&gt; to list the test packages for a particular application. Options: -f: list the .apk file for the test package.pm list features: prints all features of the system.pm list users: prints all users on the system.pm path: print the path to the .apk of the given PACKAGE.pm dump: print system state associated with the given PACKAGE.pm install: install a single legacy packagepm install-create: create an install session -l: forward lock application -r: replace existing application -t: allow test packages -i: specify the installer package name -s: install application on sdcard -f: install application on internal flash -d: allow version code downgrade -p: partial application install -g: grant all runtime permissions -S: size in bytes of entire sessionpm install-write: write a package into existing session; path may be &apos;-&apos; to read from stdin -S: size in bytes of package, required for stdinpm install-commit: perform install of fully staged sessionpm install-abandon: abandon sessionpm set-installer: set installer package namepm uninstall: removes a package from the system. Options: -k: keep the data and cache directories around after package removal.pm clear: deletes all data associated with a package.pm enable, disable, disable-user, disable-until-used: these commands change the enabled state of a given package or component (written as &quot;package/class&quot;).pm grant, revoke: these commands either grant or revoke permissions to apps. The permissions must be declared as used in the app&apos;s manifest, be runtime permissions (protection level dangerous), and the app targeting SDK greater than Lollipop MR1.pm reset-permissions: revert all runtime permissions to their default state.pm get-install-location: returns the current install location. 0 [auto]: Let system decide the best location 1 [internal]: Install on internal device storage 2 [external]: Install on external mediapm set-install-location: changes the default install location. NOTE: this is only intended for debugging; using this can cause applications to break and other undersireable behavior. 0 [auto]: Let system decide the best location 1 [internal]: Install on internal device storage 2 [external]: Install on external mediapm trim-caches: trim cache files to reach the given free space.pm create-user: create a new user with the given USER_NAME, printing the new user identifier of the user.pm remove-user: remove the user with the given USER_IDENTIFIER, deleting all data associated with that user1|shell@JDtab:/ $ 4.4.1 list12345678910111213141516list packages [options] filter 输出所有软件包，或者，仅输出包名称包含 filter 中的文本的软件包。 选项：-f：查看它们的关联文件。-d：进行过滤以仅显示已停用的软件包。-e：进行过滤以仅显示已启用的软件包。-s：进行过滤以仅显示系统软件包。-3：进行过滤以仅显示第三方软件包。-i：查看软件包的安装程序。-u：也包括卸载的软件包。--user user_id：要查询的用户空间。例:adb shell pm list packagesadb shell pm list packages -s 系统appadb shell pm list packages -3 第三方app 4.4.2 install and uninstall1234567891011121314151617install [options] path 将软件包（通过 path 指定）安装到系统。选项：-l：安装具有转发锁定功能的软件包。-r：重新安装现有应用，保留其数据。-t：允许安装测试 APK。-i installer_package_name：指定安装程序软件包名称。-s：在共享的大容量存储（如 sdcard）上安装软件包。-f：在内部系统内存上安装软件包。-d：允许版本代码降级。-g：授予应用清单中列出的所有权限。uninstall [options] package 从系统中移除软件包。选项：-k：移除软件包后保留数据和缓存目录。 4.4.3 清除数据和缓存1234adb shell pm clear 包名例 清除qq数据1|shell@JDtab:/ $ pm clear com.tencent.mobileqq 4.5 ps 进程查看和操作帮助 1234567891011121314151617181920212223adb shell ps --helpusage: ps [-AadefLlnwZ] [-gG GROUP,] [-k FIELD,] [-o FIELD,] [-p PID,] [-t TTY,] [-uU USER,]List processes.Which processes to show (selections may be comma separated lists):-A All processes-a Processes with terminals that aren&apos;t session leaders-d All processes that aren&apos;t session leaders-e Same as -A-g Belonging to GROUPs-G Belonging to real GROUPs (before sgid)-p PIDs (--pid)-P Parent PIDs (--ppid)-s In session IDs-t Attached to selected TTYs-T Show threads-u Owned by USERs-U Owned by real USERs (before suid)..... 常用进程查看操作 123adb shell ps | grep 关键字 :显示进程adb shell cat/proc/进程id/oom_adj 显示进程优先级adb shell kill [pid] 例:显示所有腾讯app进程 12345678910adb shell ps | grep tencentu0_a156 544 638 1313424 60448 0 0 S com.tencent.tim:Daemonu0_a156 623 638 1314488 60152 0 0 S com.tencent.tim:assistu0_a182 857 638 1385176 78028 0 0 S com.tencent.mobileqq:MSFu0_a165 1636 638 2473248 323928 0 0 S com.tencent.mmu0_a165 2204 638 2090388 117860 0 0 S com.tencent.mm:pushsystem 10200 637 3924720 40540 0 0 S com.tencent.soter.soterserveru0_a156 10335 638 1334496 68572 0 0 S com.tencent.tim:MSFu0_a156 23472 638 1396960 107396 0 0 S com.tencent.tim:mail 4.6 输入 input12345678910111213141516171819202122232425262728293031323334353637383940414243444546input &lt;command&gt; [&lt;arg&gt;...]查看帮助shell@JDtab:/ $ input helpError: Unknown command: helpUsage: input [&lt;source&gt;] &lt;command&gt; [&lt;arg&gt;...]The sources are: mouse keyboard joystick touchnavigation touchpad trackball stylus dpad touchscreen gamepadThe commands and default sources are: text &lt;string&gt; (Default: touchscreen) keyevent [--longpress] &lt;key code number or name&gt; ... (Default: keyboard) tap &lt;x&gt; &lt;y&gt; (Default: touchscreen) swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt; [duration(ms)] (Default: touchscreen) press (Default: trackball) roll &lt;dx&gt; &lt;dy&gt; (Default: trackball) 3dtouch &lt;x&gt; &lt;y&gt; &lt;z&gt;(Default: touchscreen)shell@JDtab:/ $ sources? 好像用不上 主要是commands的使用模拟输入文字adb shell input text &quot;hahah&quot; 注意输入中文时键盘模式需要是中文 同理英文模拟点击屏幕input tap 123 312 模拟模拟按键input keyevent 3 返回桌面常用按键 event1 menu KEYCODE_MENU3 home KEYCODE_HOME4 back KEYCODE_BACK21 光标左移 KEYCODE_DPAD_LEFT22 光标右移 KEYCODE_DPAD_RIGHT67 删除 KEYCODE_DEL 4.7 截图和录屏12345678910截图adb shell screencap /sdcard/我是截图.png 录屏如果不设置时间默认3分钟, 使用 --time-limit 设置截屏时间adb shell screenrecord /sdcard/我是视频.mp4 --time-limit 12录屏帮助screedrecord --help截图和录屏完毕后可退出 shell,使用 `adb pull /sdcard/我是视频.mp4` 把文件从手机复制到电脑 4.8 monkey12345678910111213141516171819202122232425262728293031323334查看帮助shell@JDtab:/ $ monkey help ** Error: Count is not a numberusage: monkey [-p ALLOWED_PACKAGE [-p ALLOWED_PACKAGE] ...] [-c MAIN_CATEGORY [-c MAIN_CATEGORY] ...] [--ignore-crashes] [--ignore-timeouts] [--ignore-security-exceptions] [--monitor-native-crashes] [--ignore-native-crashes] [--kill-process-after-error] [--hprof] [--pct-touch PERCENT] [--pct-motion PERCENT] [--pct-trackball PERCENT] [--pct-syskeys PERCENT] [--pct-nav PERCENT] [--pct-majornav PERCENT] [--pct-appswitch PERCENT] [--pct-flip PERCENT] [--pct-anyevent PERCENT] [--pct-pinchzoom PERCENT] [--pct-permission PERCENT] [--pkg-blacklist-file PACKAGE_BLACKLIST_FILE] [--pkg-whitelist-file PACKAGE_WHITELIST_FILE] [--wait-dbg] [--dbg-no-events] [--setup scriptfile] [-f scriptfile [-f scriptfile] ...] [--port port] [-s SEED] [-v [-v] ...] [--throttle MILLISEC] [--randomize-throttle] [--profile-wait MILLISEC] [--device-sleep-time MILLISEC] [--randomize-script] [--script-log] [--bugreport] [--periodic-bugreport] [--permission-target-system] COUNT255|shell@JDtab:/ $ 例:adb shell monkey -v -p your.package.name 500 五.dumpsys 将系统数据转储到屏幕developer.android.com 123456789101112131415161718192021命令格式adb shell dumpsys [-t timeout] [--help | -l | --skip services | service [arguments] | -c | -h]选项说明-t timeout 指定时间 默认10秒--help 查看帮助-l 列出可用参数列表--skip services Specifies the services that you do not want to include in the output.service [arguments] Specifies the service that you want to output. Some services may allow you to pass optional arguments. You can learn about these optional arguments by passing the -h option with the service, as shown below:adb shell dumpsys procstats -h -c When specifying certain services, append this option to output data in a machine-friendly format.-h For certain services, append this option to see help text and additional options for that service.常用dumpsys activity AMS服务相关信息dumpsys window WMS服务相关信息dumpsys cpuinfo CPU信息dumpsys meminfo 内存信息 dumpsys activity 12345678910111213141516171819202122232425262728293031323334查看帮助adb shell dumpsys activity -h Activity manager dump options: [-a] [-c] [-p PACKAGE] [-h] [WHAT] ... WHAT may be one of: a[ctivities]: activity stack state //查看activity r[recents]: recent activities state b[roadcasts] [PACKAGE_NAME] [history [-s]]: broadcast state broadcast-stats [PACKAGE_NAME]: aggregated broadcast statistics i[ntents] [PACKAGE_NAME]: pending intent state p[rocesses] [PACKAGE_NAME]: process state o[om]: out of memory management perm[issions]: URI permission grant state prov[iders] [COMP_SPEC ...]: content provider state provider [COMP_SPEC]: provider client-side state s[ervices] [COMP_SPEC ...]: service state //服务 as[sociations]: tracked app associations settings: currently applied config settings service [COMP_SPEC]: service client-side state package [PACKAGE_NAME]: all state related to given package all: dump all activities top: dump the top activity WHAT may also be a COMP_SPEC to dump activities. COMP_SPEC may be a component name (com.foo/.myApp), a partial substring in a component name, a hex object identifier. -a: include all available server state. -c: include client state. -p: limit output to given package. --checkin: output checkin format, resetting data. --C: output checkin format, not resetting data. --proto: output dump in protocol buffer format. --autofill: dump just the autofill-related state of an activity 12345例: 查看acitivty信息 adb shell dumpsys activity activities 或者 adb shell dumpsys activity a 查看微信所有服务 adb shell dumpsys activity s com.tencent.mm 查看当前activity 1adb shell dumpsys activity activities | grep &quot;mResumedActivity&quot; 详细Adb常用命令","categories":[{"name":"Adb","slug":"Adb","permalink":"http://qingyc.github.io/categories/Adb/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://qingyc.github.io/tags/Android/"},{"name":"adb","slug":"adb","permalink":"http://qingyc.github.io/tags/adb/"}]},{"title":"kotlin泛型相关_reifield","slug":"kotlin泛型相关-reifield","date":"2019-08-18T08:18:45.000Z","updated":"2019-08-18T08:34:24.468Z","comments":true,"path":"2019/08/18/kotlin泛型相关-reifield/","link":"","permalink":"http://qingyc.github.io/2019/08/18/kotlin泛型相关-reifield/","excerpt":"","text":"Kotlin泛型1.reified的作用https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md 支持通过方法传递的类型运行时可用可达 由于java泛型是伪泛型,为了兼容java1.5以前的版本,java运行时,会泛型擦除 会擦除为泛型上界,如果没有泛型上界会擦除为Object,所以jvm在程序运行时是不知道泛型的真实类型, reifield 能保证运行时依然能拿到泛型的具体类型.(当前只限制支持内联函数可用) 1234567891011# Reified Type ParametersGoal: support run-time access to types passed to functions, as if they were reified (currently limited to inline functions only).## SyntaxA type parameter of a function can be marked as `reified`:inline fun foo&lt;reified T&gt;() &#123;&#125; 2.实际使用Activity定义扩展函数 12345678910inline fun &lt;reified T : Activity&gt; Activity.startActivityKtx() &#123; this.startActivity(Intent(this, T::class.java))&#125;inline fun &lt;reified T : Activity&gt; Activity.startActivityKtxWithParam(block: (intent: Intent) -&gt; Any) &#123; val intent = Intent(this, T::class.java) block.invoke(intent) this.startActivity(intent)&#125; 调用 12345678//跳转Activity 带参数startActivityKtxWithParam&lt;TemplateListActivity&gt; &#123; it.putExtra(TemplateListActivity.KEY_CATEGORY_NAME, datas[position].categoryName) &#125; //跳转Activity 不带参数 startActivityKtx&lt;MoreActivity&gt;() 如果不用reifield 我们的写法是 123fun Activity.startActivityKtx(cls: Class&lt;*&gt;) &#123; this.startActivity(Intent(this, cls))&#125; 调用是 1startActivityKtx(Intent(this, MoreActivity::class.java)) String定义扩展函数 1234567891011121314151617181920inline fun &lt;reified T&gt; String.jsonToObj(): T? &#123; return try &#123; val g = Gson() val type = object : TypeToken&lt;T&gt;() &#123;&#125;.type g.fromJson&lt;T&gt;(this, type) &#125; catch (e: Exception) &#123; null &#125;&#125;inline fun &lt;reified T&gt; String.jsonToObjList(): ArrayList&lt;T&gt;? &#123; return try &#123; val g = Gson() val type = object : TypeToken&lt;ArrayList&lt;T&gt;&gt;() &#123;&#125;.type return g.fromJson&lt;ArrayList&lt;T&gt;&gt;(this, type) &#125; catch (e: Exception) &#123; null &#125;&#125; json string直接转对象 1.json 格式 12345678910111213141516171819202122232425262728293031323334[ &#123; \"pic\": \"classic_08\", \"name\": \"classic\" &#125;, &#123; \"pic\": \"polygon_04\", \"name\": \"polygon\" &#125;, &#123; \"pic\": \"quote_02\", \"name\": \"quote\" &#125;, &#123; \"pic\": \"simple_03\", \"name\": \"simple\" &#125;, &#123; \"pic\": \"travel_07\", \"name\": \"travel\" &#125;, &#123; \"pic\": \"marble_06\", \"name\": \"marble\" &#125;, &#123; \"pic\": \"cloud_08\", \"name\": \"cloud\" &#125;, &#123; \"pic\": \"freedom_03\", \"name\": \"freedom\" &#125;] 2.bean 12@Parcelizedata class TemplateCategoryItemInfo(@SerializedName(&quot;pic&quot;) var categoryCoverPic: String, @SerializedName(&quot;name&quot;) var categoryName: String) : Parcelable 3.string 2 bean (assets2String.jsonToObjList()) 1234567class CategoryModel : IModel &#123; fun getData(): ArrayList&lt;TemplateCategoryItemInfo&gt;? &#123; val assets2String = ResourceUtils.readAssets2String(&quot;category.json&quot;) return assets2String.jsonToObjList() &#125;&#125; 不使用reifeild 123456789fun &lt;T&gt; String.jsonToObj2(): T? &#123; return try &#123; val g = Gson() val type = object : TypeToken&lt;T&gt;() &#123;&#125;.type g.fromJson&lt;T&gt;(this, type) &#125; catch (e: Exception) &#123; null &#125;&#125; 可以看出Gson 在解析时是没有判断出泛型T的真实类型的 使用reifeild 参考reified-type-parameters.md [译]Kotlin的独门秘籍Reified实化类型参数(上篇) 我与 Kotlin 的爱恨情仇之浅谈 reified","categories":[{"name":"Kotlin","slug":"Kotlin","permalink":"http://qingyc.github.io/categories/Kotlin/"},{"name":"Android","slug":"Kotlin/Android","permalink":"http://qingyc.github.io/categories/Kotlin/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://qingyc.github.io/tags/Android/"},{"name":"Kotlin","slug":"Kotlin","permalink":"http://qingyc.github.io/tags/Kotlin/"}]},{"title":"PorterDuffXfermode的一些使用问题","slug":"PorterDuffXfermode的一些使用问题","date":"2019-07-28T05:39:56.000Z","updated":"2019-08-18T08:33:40.949Z","comments":true,"path":"2019/07/28/PorterDuffXfermode的一些使用问题/","link":"","permalink":"http://qingyc.github.io/2019/07/28/PorterDuffXfermode的一些使用问题/","excerpt":"","text":"PorterDuffXfermode的一些使用问题一 PorterDuff.Mode使用问题1.1 PorterDuff.Mode.CLEAR 正常效果 targetSdkVersion 28 1.2 PorterDuff.ModePorterDuff.Mode 官方效果https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html 1.2 PorterDuffXfermode 在Android 27 和 28 的实际效果 PorterDuffXfermode_27 PorterDuffXfermode_28 图片来源 二 绘制时 canvas 画布不同导致的问题after change another canvas ,PorterDuffXfermode(PorterDuff.Mode.CLEAR) is not work 创建 另一个 画布 123//保存没有背景的截图screenShotBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)mScreenShotCanvas = Canvas(screenShotBitmap) dispatchDraw12345678910111213141516171819202122 override fun dispatchDraw(canvas: Canvas?) &#123; ... //7.绘制蒙版 drawMask(canvas) .... //截图 mScreenShotCanvas?.let &#123; canvas -&gt; ... //7.绘制蒙版 drawMask(canvas, true) ... &#125;... &#125; 问题 传入的canvas 不同 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364/** * 绘制蒙版 * */private fun drawMask(canvas: Canvas, shotScreen: Boolean = false) &#123; try &#123;//qtip rl_frame_content -&gt; 相框外层容器 rl_frame_content?.let &#123; //先获取相框外层容器的位置 val rlLeft = it.left val rlTop = it.top mGpuIV?.let &#123; gpuIv -&gt; mMaskBitmap?.let &#123; mask -&gt; //获取相片和相框外侧之间的位置关系 val gpuIvLeft = rl_gpu_iv_content_trim.left val gpuIvTop = rl_gpu_iv_content_trim.top val gpuIvWidth = rl_gpu_iv_content_trim.width val gpuIvHeight = rl_gpu_iv_content_trim.height val newWidth = gpuIvWidth - 2 * mMaskMargin val newHeight = gpuIvHeight - 2 * mMaskMargin //缩放后的蒙版(根据图片的大小调整蒙版大小) if (mScaledMaskBitmap == null) &#123; mScaledMaskBitmap = BitmapUtils.scaleBitmapInMaxWidthOrHeight(mask, newWidth, newHeight) &#125; mScaledMaskBitmap?.let &#123; scaleMask -&gt; //绘制mask val left = rlLeft.toFloat() + gpuIvLeft val top = rlTop.toFloat() + gpuIvTop //1.离屏画布 val save = canvas.saveLayer(left, top, left + gpuIvWidth, top + gpuIvHeight, null, Canvas.ALL_SAVE_FLAG) //2.绘制带颜色蒙版 创建大小和 rl_frame_content 一样的蒙版 val dstBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888) //创建蒙版画布 val dstCav = Canvas(dstBitmap) //蒙版颜色 dstCav.drawColor(mMaskColor) canvas.drawBitmap(dstBitmap, left, top, null) //3.蒙版掏空出透明形状区域 val paintMask = Paint() paintMask.isAntiAlias = true paintMask.xfermode = PorterDuffXfermode(PorterDuff.Mode.CLEAR) //蒙版位置居中 canvas.drawBitmap(scaleMask, left + (gpuIvWidth - scaleMask.width) / 2, top + (gpuIvHeight - scaleMask.height) / 2, paintMask) //4.画布恢复 canvas.restoreToCount(save) &#125; &#125; &#125; &#125; &#125; catch (e: Exception) &#123; QLogger.e(e) &#125;&#125; 需要的效果 截图时实际效果 并不是 paintMask.xfermode = PorterDuffXfermode(PorterDuff.Mode.CLEAR)无效 而是 clear的区域不是 图片的非透明区而是 整个图片 解决问题 // QTIP: 2019-07-23 修改 1PorterDuff.Mode.CLEAR 为 PorterDuff.Mode.DST_OUT 或者 PorterDuff.Mode.XOR 待解决疑问 : Android api 28 以下 传入有bitmap的canvas 绘制时 PorterDuff.Mode.CLEAR 无效 参考https://stackoverflow.com/questions/51538443/xfermode-in-android-p-beta?noredirect=1#comment90044905_51538443 https://stackoverflow.com/questions/10494442/android-paint-porterduff-mode-clear?rq=1 https://issuetracker.google.com/issues/111819103 https://stackoverflow.com/questions/56189189/android-in-android-pie-api-28-radialgradient-draws-a-rectangle-instead-of-a?rq=1 https://android.googlesource.com/platform/development/+/master/samples/ApiDemos/src/com/example/android/apis/graphics/Xfermodes.java 关联下 ViewOutlineProvider 12345/** * Interface by which a View builds its &#123;@link Outline&#125;, used for shadow casting and clipping. */public abstract class ViewOutlineProvider &#123;...","categories":[{"name":"Android","slug":"Android","permalink":"http://qingyc.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://qingyc.github.io/tags/Android/"}]},{"title":"开始整理下吧 ...","slug":"HelloWorld","date":"2019-07-20T17:01:10.000Z","updated":"2019-08-18T08:29:34.259Z","comments":true,"path":"2019/07/21/HelloWorld/","link":"","permalink":"http://qingyc.github.io/2019/07/21/HelloWorld/","excerpt":"","text":"开始整理下吧 啦啦啦…..","categories":[{"name":"qing","slug":"qing","permalink":"http://qingyc.github.io/categories/qing/"}],"tags":[]},{"title":"hexo-github-pages","slug":"hexo-github-pages","date":"2019-07-20T09:17:53.000Z","updated":"2019-07-20T16:57:35.557Z","comments":true,"path":"2019/07/20/hexo-github-pages/","link":"","permalink":"http://qingyc.github.io/2019/07/20/hexo-github-pages/","excerpt":"","text":"Hexo + github pages 搭建个人博客一 Hexo啥是 Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 官方文档 https://hexo.io/zh-cn/docs/setup 1.1 安装前提 先安装Node.js (Should be at least nodejs 6.9) Git 安装1npm install -g hexo-cli 1.2 使用 初始化 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 生成静态文件 1hexo g 运行 1hexo s 部署 1hexo deploy 详细部署说明 2 Github Pageshttps://pages.github.com/ 自定义域名 先安装插件 1npm install hexo-deployer-git --save 2.1 问题记录1234and the repository exists.FATAL Something&apos;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlError: Spawn failed at ChildProcess.&lt;anonymous&gt; (/Users/xxx/GIT_HEXO_W/xxx.github.io/node_modules/hexo-util/lib/spawn.js:52:19) 解决生成ssh key 添加ssh key Linkhttps://hexo.io/zh-cn/docs/ Hexo 博客搭建指南 手把手教你使用Hexo + Github Pages搭建个人独立博客","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://qingyc.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://qingyc.github.io/tags/Hexo/"}]}]}